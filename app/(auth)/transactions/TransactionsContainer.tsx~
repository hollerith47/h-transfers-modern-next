"use client"
import {useTransactions} from "@/hook/useTransaction";
import TransactionsTable from "@/app/(auth)/transactions/TransactionsTable";
import Loader from "@/components/ui/Loader";
import EmptyTransaction from "@/components/ui/EmptyTransaction";
import {useTransactionFilters} from "@/hook/useTransactionFilters";
import {TransactionFilterBar} from "@/components/features/transaction/TransactionFilterBar";

export default function TransactionsContainer() {
    const {data: txs=[], isLoading, isError , isFetching, refetch} = useTransactions();

    const {
        filtered,
        filterType, setFilterType,
        filterStatus, setFilterStatus,
        searchTerm,   setSearchTerm,
        filterDate,   setFilterDate,
    } = useTransactionFilters(txs);

    /*
    const [filterType, setFilterType] = useState<"all"|"income"|"outcome">("all");
    const [filterStatus, setFilterStatus] = useState<"all"|"pending"|"completed">("all");
    const [searchTerm, setSearchTerm] = useState("");
    const [filterDate, setFilterDate] = useState<string>(""); // YYYY-MM-DD

    const filtered = useMemo(() => {
        return txs.filter((tx) => {
            const byType = filterType === "all" || tx.type === filterType;
            const byStatus = filterStatus === "all" || tx.status === filterStatus;
            const bySearch = tx.description
                .toLowerCase()
                .includes(searchTerm.toLowerCase());

            // Filtre par date : on compare la partie YYYY-MM-DD
            const txDate = new Date(tx.createdAt)
                .toISOString()
                .split("T")[0];
            const matchesDate = !filterDate || txDate === filterDate;
            return byType && byStatus && bySearch && matchesDate;
        });
    }, [txs, filterType, filterStatus, searchTerm, filterDate]);*/

    if (isLoading) return <Loader fullScreen />;
    if (isError)   return <div className="p-4">Erreur de chargement.</div>;

    // console.log(txs)
    return (
        <div>
            <TransactionFilterBar
                filterType    ={filterType}
                setFilterType ={setFilterType}
                filterStatus  ={filterStatus}
                setFilterStatus={setFilterStatus}
                searchTerm    ={searchTerm}
                setSearchTerm ={setSearchTerm}
                filterDate    ={filterDate}
                setFilterDate ={setFilterDate}
                onRefresh     ={() => refetch()}
                isFetching    ={isFetching}
            />
            {filtered.length > 0 ? (
                <>
                    <TransactionsTable transactions={filtered}/>
                </>
            ) : (
                <EmptyTransaction />
            )}
        </div>
    );
}