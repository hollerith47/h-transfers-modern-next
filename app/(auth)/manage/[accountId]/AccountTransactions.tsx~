"use client";
import {useState, useMemo} from "react";
import {toast} from "sonner";
import {useQuery} from "@tanstack/react-query";
import {getTransactionsByAccountId} from "@/app/actions";
import AccountItem from "@/components/AccountItem";
import AccountTransactionsTable from "@/app/(auth)/manage/[accountId]/AccountTransactionsTable";
import TransactionForm from "@/app/(auth)/manage/[accountId]/TransactionForm";
import Loader from "@/components/Loader";
import DeleteAccountButton from "@/app/(auth)/manage/[accountId]/DeleteAccountButton";
import {Transaction} from "@/types";
import EmptyTransaction from "@/components/EmptyTransaction";

type Props = {
    accountId: string;
};

export default function AccountTransactions({accountId}: Props) {
    const {data: account, isLoading, isError} = useQuery({
        queryKey: ["account", accountId],
        queryFn: async () => {
            if (!accountId) return;
            try {
                return await getTransactionsByAccountId({accountId});
            } catch (error) {
                console.error("error while fetching account", error);
                toast.error("Failed to fetch account data.");
                throw error;
            }
        },
    });

    // Filtre par type de transaction
    const [filterType, setFilterType] = useState<"all" | "income" | "outcome">(
        "all"
    );
    const [filterStatus, setFilterStatus] = useState<"all"|"pending"|"completed">("all");
    // Recherche par description
    const [searchTerm, setSearchTerm] = useState("");

    const filteredTransactions = useMemo((): Transaction[] => {
        if (!account) return [];
        // on force transactions à être un tableau
        return (account.transactions ?? []).filter((tx) => {
            const matchesType = filterType === "all" || tx.type === filterType;
            const byStatus = filterStatus === "all" || tx.status === filterStatus;
            const matchesSearch = tx.description
                .toLowerCase()
                .includes(searchTerm.toLowerCase());
            return matchesType && byStatus && matchesSearch;
        });
    }, [account, filterType, filterStatus,searchTerm]);


    if (isLoading) return <Loader fullScreen size="xl"/>;
    if (isError || !account) return <div>Error loading account.</div>;

    console.log(filteredTransactions)

    return (
        <>
            <div className="md:flex w-full justify-between mb-4">
                <div className="md:w-2/3">
                    <AccountItem account={account}/>
                </div>
                <div className="flex justify-between md:justify-start md:flex-col gap-2 mt-4 md:mt-0">
                    <TransactionForm account={account}/>
                    <DeleteAccountButton accountId={account.id}/>
                </div>
            </div>

            {/* Contrôles de filtre et recherche */}
            <div className="flex flex-col md:flex-row items-start md:items-center gap-4 mb-4">
                {/* Filtrer par type */}
                <select
                    className="input input-bordered w-full md:w-48"
                    value={filterType}
                    onChange={(e) =>
                        setFilterType(e.target.value as "all" | "income" | "outcome")
                    }
                >
                    <option value="all">Tous les types</option>
                    <option value="income">Entrées</option>
                    <option value="outcome">Sorties</option>
                </select>
                
                <select
                    className="input input-bordered w-full md:w-48"
                    value={filterStatus}
                    onChange={(e) =>
                        setFilterStatus(e.target.value as "all" | "pending" | "completed")
                    }
                >
                    <option value="all">Tous les statuts</option>
                    <option value="pending">En attente</option>
                    <option value="completed">Terminée</option>
                </select>

                {/* Recherche par description */}
                <input
                    type="text"
                    className="input input-bordered w-full md:w-64"
                    placeholder="Rechercher par description"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
            </div>
            {
                filteredTransactions.length > 0 ? (
                    <AccountTransactionsTable
                        transactions={filteredTransactions}
                        account={account}
                    />
                ) : (
                    <EmptyTransaction />
                )
            }
        </>
    );
}
